;fragtester instance cosprec 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
;sympy from sympy import *
;sympy x = Symbol('x', real=True)
;sympy symbols = [x]
;sympy testRanges = {'real: x': list(np.arange(-5,5,0.1)),
;sympy     'imag: x': list(np.arange(-5,5,2)),
;sympy     'real: y': list(np.arange(-5,5,2)),
;sympy     'imag: y': list(np.arange(-5,5,2)),
;sympy     }
;sympy with evaluate(False):
;sympy     spExpr = cos(x)  
;
;
; cosine of real number passed as argument
; r0 is the real part of the number
%fragment cosargreal template:true default_cosprec:20 resin:r0 resout:r1 default_prefix:0f
	mov     r1, {{ .Params.prefix }}1.0 ; r1 is the result
        mov     r2, {{ .Params.prefix }}1.0 ; r2 is the index
        mov     r3, {{ .Params.prefix }}1.0 ; r3 is the denominator
        ;mov     r4, {{ .Params.prefix }}1.0 ; r4 is used for sign inversion and for +1 operation
        mov     r5, {{ .Params.prefix }}1.0 ; r5 is the numerator
        mov     r6, {{ .Params.cosprec }} ; r6 is the precision
	mov     r7, {{ .Params.prefix }}1.0 ; r7 is numerator / denominator
loop:
        mov     r4, {{ .Params.prefix }}-1.0 ; r4 is used for sign inversion and for +1 operation
	{{ .Params.multop }}	r3, r4 ; sign inversion (the sign will follow r3)
        mov     r4, {{ .Params.prefix }}1.0 ; r4 is used for sign inversion and for +1 operation

	{{ .Params.multop }}	r3, r2 ; denominator progression (factorial of r2)
	{{ .Params.multop }}	r5, r0 ; numerator progression (x^r2)
	{{ .Params.addop }}	r2, r4 ; r2 = r2 + 1
	; One factor is not added
	{{ .Params.multop }}	r3, r2 ; denominator progression (factorial of r2)
	{{ .Params.multop }}	r5, r0 ; numerator progression (x^r2)
	{{ .Params.addop }}	r2, r4 ; r2 = r2 + 1

	cpy	r7, r5 ; r7 = x^r2
	{{ .Params.divop }}	r7, r3 ; r7 = x^r2 / factorial(r2)
	
	{{ .Params.addop }}	r1, r7 ; r1 = r1 + x^r2 / factorial(r2)

	dec	r6 ; decrement precision
	jz	r6, exit ; if r6 == 0, exit
	j loop ; else, loop
exit:
	nop	
%endfragment
