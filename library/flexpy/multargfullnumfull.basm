;fragtester range numberreal arange(-5,5,2)
;fragtester range numberimag arange(-5,5,2)
;sympy from sympy import *
;sympy x = Symbol('x', real=False)
;sympy symbols = [x]
;sympy testRanges = {'real: x': list(np.arange(-5,5,2)),
;sympy     'imag: x': list(np.arange(-5,5,2)),
;sympy     'real: y': list(np.arange(-5,5,2)),
;sympy     'imag: y': list(np.arange(-5,5,2)),
;sympy     }
;sympy with evaluate(False):
;sympy     spExpr = x * ({{ .Params.numberreal }} + {{ .Params.numberimag }}*I)
;
;
; product of a complex number passed as argument to an immediate complex number
; r0 is the real part of the argument
; r1 is the imaginary part of the argument
; {{ .Params.numberreal }} is the real part of the immediate value
; {{ .Params.numberimag }} is the immaginary part of the immediate value
%fragment multargfullnumfull template:true default_setop:rset resin:r0:r1 resout:r0:r1
	{{ .Params.setop }}	r4, {{ .Params.prefix }}-1
	{{ .Params.setop }}	r3, {{ .Params.prefix }}{{ .Params.numberimag }}
	{{ .Params.setop }}	r2, {{ .Params.prefix }}{{ .Params.numberreal }}
	
	cpy	r5, r1
	cpy	r6, r0
	{{ .Params.multop }}	r0, r2
	{{ .Params.multop }}	r5, r3
	{{ .Params.multop }}	r5, r4
	{{ .Params.addop }}	r0, r5

	{{ .Params.multop }}	r1, r2
	{{ .Params.multop }}	r6, r3
	{{ .Params.addop }}	r1, r6
%endfragment
