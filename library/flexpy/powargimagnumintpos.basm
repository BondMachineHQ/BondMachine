;fragtester range numberint intRange(0,10)
;sympy from sympy import *
;sympy x = Symbol('x', real=True)
;sympy symbols = [x]
;sympy testRanges = {'real: x': list(np.arange(-5,5,0.5)),
;sympy     'imag: x': list(np.arange(-5,5,2)),
;sympy     'real: y': list(np.arange(-5,5,2)),
;sympy     'imag: y': list(np.arange(-5,5,2)),
;sympy     }
;sympy with evaluate(False):
;sympy     spExpr = (x * I) ** {{ .Params.exponent }}
;
;
; power of an imaginary number (argument) raised to a natural number (immediate value)
; r0 is the imaginary coefficient (real value) of the imaginary number
; {{ .Params.exponent }} is the exponent (natural number immediate value)
; Result: (x*I)^n where x is in r0
; Output: r0 contains the non-zero component (real or imaginary part depending on exponent mod 4)
%fragment powargimagnumintpos template:true default_exponent:0 default_setop:rset resin:r0 resout:r0 default_prefix:0f
	{{ .Params.setop }}	r2, {{ .Params.exponent }} ; load the exponent
	mov     r3, {{ .Params.prefix }}1.0 ; r3 is the magnitude result, starts at 1.0
	
	; Calculate magnitude: x^n
	cpy	r4, r2 ; copy exponent for loop counter
magnitude_loop:
	{{ .Params.multop }}	r3, r0 ; multiply result by base
	dec	r4 ; decrement exponent counter
	jz	r4, magnitude_done ; if counter reaches 0, exit
	j	magnitude_loop
	
magnitude_done:
	; Now r3 contains x^n (the magnitude)
	; Determine phase based on exponent mod 4
	; r2 still contains the original exponent
	
	; Calculate n mod 4 using repeated subtraction
	cpy	r4, r2 ; copy exponent
	
mod4_loop:
	; Check if r4 is 0, 1, 2, 3, or >= 4 by trying to decrement 4 times
	cpy	r6, r4
	jz	r6, mod4_is_0 ; if r4 = 0
	dec	r6
	jz	r6, mod4_is_1 ; if r4 = 1
	dec	r6
	jz	r6, mod4_is_2 ; if r4 = 2
	dec	r6
	jz	r6, mod4_is_3 ; if r4 = 3
	dec	r6
	jz	r6, mod4_is_0 ; if r4 = 4 (mod 4 = 0)
	
	; If we're here, r4 > 4, so subtract 4 and continue
	cpy	r4, r6 ; r4 = r4 - 4 (r6 already has r4-4)
	j	mod4_loop

mod4_is_0:
	mov	r0, r3
	j	done
	
mod4_is_1:
	mov	r0, r3
	j	done
	
mod4_is_2:
        {{ .Params.setop }}	r5, {{ .Params.prefix }}-1
	{{ .Params.multop }}	r3, r5
        mov     r0, r3
	j	done
	
mod4_is_3:
        {{ .Params.setop }}     r5, {{ .Params.prefix }}-1
	{{ .Params.multop }}	r3, r5
	mov     r0, r3
	j	done
		
done:
	nop	
%endfragment
