;fragtester instance expprec 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
;sympy from sympy import *
;sympy x = Symbol('x', real=True)
;sympy symbols = [x]
;sympy testRanges = {'real: x': list(np.arange(-5,5,0.1)),
;sympy     'imag: x': list(np.arange(-5,5,2)),
;sympy     'real: y': list(np.arange(-5,5,2)),
;sympy     'imag: y': list(np.arange(-5,5,2)),
;sympy     }
;sympy with evaluate(False):
;sympy     spExpr = exp(x)  
;
;
; exponential function of real number passed as argument
; r0 is the real part of the number (the exponent)
%fragment expargreal template:true default_expprec:20 default_prefix:0f resin:r0 resout:r1
	mov     r1, {{ .Params.prefix }}1.0 ; r1 is the result (accumulator)
        mov     r2, {{ .Params.prefix }}1.0 ; r2 is the index (n)
        mov     r3, {{ .Params.prefix }}1.0 ; r3 is the denominator (n!)
        mov     r4, {{ .Params.prefix }}1.0 ; r4 is used for +1 operation
        mov     r5, {{ .Params.prefix }}1.0 ; r5 is the numerator (x^n)
        mov     r6, {{ .Params.expprec }} ; r6 is the precision (loop counter)
	mov     r7, {{ .Params.prefix }}1.0 ; r7 is numerator / denominator
loop:
	{{ .Params.multop }}	r3, r2 ; denominator progression (n! *= n)
	{{ .Params.multop }}	r5, r0 ; numerator progression (x^n *= x)
	{{ .Params.addop }}	r2, r4 ; r2 = r2 + 1 (increment n)

	cpy	r7, r5 ; r7 = x^n
	{{ .Params.divop }}	r7, r3 ; r7 = x^n / n!
	
	{{ .Params.addop }}	r1, r7 ; r1 = r1 + x^n / n!

	dec	r6 ; decrement precision counter
	jz	r6, exit ; if r6 == 0, exit
	j loop ; else, continue loop
exit:
	nop	
%endfragment
